// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: protos/biarbala.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BiarbalaService_UploadProject_FullMethodName               = "/biarbala.v1.BiarbalaService/UploadProject"
	BiarbalaService_GetProject_FullMethodName                  = "/biarbala.v1.BiarbalaService/GetProject"
	BiarbalaService_UpdateProject_FullMethodName               = "/biarbala.v1.BiarbalaService/UpdateProject"
	BiarbalaService_DeleteProject_FullMethodName               = "/biarbala.v1.BiarbalaService/DeleteProject"
	BiarbalaService_ListProjects_FullMethodName                = "/biarbala.v1.BiarbalaService/ListProjects"
	BiarbalaService_GetProjectMetrics_FullMethodName           = "/biarbala.v1.BiarbalaService/GetProjectMetrics"
	BiarbalaService_SetProjectDomain_FullMethodName            = "/biarbala.v1.BiarbalaService/SetProjectDomain"
	BiarbalaService_VerifyDomain_FullMethodName                = "/biarbala.v1.BiarbalaService/VerifyDomain"
	BiarbalaService_GetDomainVerificationStatus_FullMethodName = "/biarbala.v1.BiarbalaService/GetDomainVerificationStatus"
	BiarbalaService_HealthCheck_FullMethodName                 = "/biarbala.v1.BiarbalaService/HealthCheck"
)

// BiarbalaServiceClient is the client API for BiarbalaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BiarbalaService provides the main API for the Biarbala platform
type BiarbalaServiceClient interface {
	// Upload a compressed file containing static website files
	UploadProject(ctx context.Context, in *UploadProjectRequest, opts ...grpc.CallOption) (*UploadProjectResponse, error)
	// Get project information
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// Update project settings
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// Delete a project
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List user's projects
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Get project usage metrics
	GetProjectMetrics(ctx context.Context, in *GetProjectMetricsRequest, opts ...grpc.CallOption) (*GetProjectMetricsResponse, error)
	// Domain management
	SetProjectDomain(ctx context.Context, in *SetProjectDomainRequest, opts ...grpc.CallOption) (*SetProjectDomainResponse, error)
	VerifyDomain(ctx context.Context, in *VerifyDomainRequest, opts ...grpc.CallOption) (*VerifyDomainResponse, error)
	GetDomainVerificationStatus(ctx context.Context, in *GetDomainVerificationStatusRequest, opts ...grpc.CallOption) (*GetDomainVerificationStatusResponse, error)
	// Health check endpoint
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type biarbalaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBiarbalaServiceClient(cc grpc.ClientConnInterface) BiarbalaServiceClient {
	return &biarbalaServiceClient{cc}
}

func (c *biarbalaServiceClient) UploadProject(ctx context.Context, in *UploadProjectRequest, opts ...grpc.CallOption) (*UploadProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadProjectResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_UploadProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BiarbalaService_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) GetProjectMetrics(ctx context.Context, in *GetProjectMetricsRequest, opts ...grpc.CallOption) (*GetProjectMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectMetricsResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_GetProjectMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) SetProjectDomain(ctx context.Context, in *SetProjectDomainRequest, opts ...grpc.CallOption) (*SetProjectDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetProjectDomainResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_SetProjectDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) VerifyDomain(ctx context.Context, in *VerifyDomainRequest, opts ...grpc.CallOption) (*VerifyDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyDomainResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_VerifyDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) GetDomainVerificationStatus(ctx context.Context, in *GetDomainVerificationStatusRequest, opts ...grpc.CallOption) (*GetDomainVerificationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDomainVerificationStatusResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_GetDomainVerificationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biarbalaServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, BiarbalaService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiarbalaServiceServer is the server API for BiarbalaService service.
// All implementations must embed UnimplementedBiarbalaServiceServer
// for forward compatibility.
//
// BiarbalaService provides the main API for the Biarbala platform
type BiarbalaServiceServer interface {
	// Upload a compressed file containing static website files
	UploadProject(context.Context, *UploadProjectRequest) (*UploadProjectResponse, error)
	// Get project information
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// Update project settings
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// Delete a project
	DeleteProject(context.Context, *DeleteProjectRequest) (*emptypb.Empty, error)
	// List user's projects
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Get project usage metrics
	GetProjectMetrics(context.Context, *GetProjectMetricsRequest) (*GetProjectMetricsResponse, error)
	// Domain management
	SetProjectDomain(context.Context, *SetProjectDomainRequest) (*SetProjectDomainResponse, error)
	VerifyDomain(context.Context, *VerifyDomainRequest) (*VerifyDomainResponse, error)
	GetDomainVerificationStatus(context.Context, *GetDomainVerificationStatusRequest) (*GetDomainVerificationStatusResponse, error)
	// Health check endpoint
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedBiarbalaServiceServer()
}

// UnimplementedBiarbalaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBiarbalaServiceServer struct{}

func (UnimplementedBiarbalaServiceServer) UploadProject(context.Context, *UploadProjectRequest) (*UploadProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProject not implemented")
}
func (UnimplementedBiarbalaServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedBiarbalaServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedBiarbalaServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedBiarbalaServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedBiarbalaServiceServer) GetProjectMetrics(context.Context, *GetProjectMetricsRequest) (*GetProjectMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectMetrics not implemented")
}
func (UnimplementedBiarbalaServiceServer) SetProjectDomain(context.Context, *SetProjectDomainRequest) (*SetProjectDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProjectDomain not implemented")
}
func (UnimplementedBiarbalaServiceServer) VerifyDomain(context.Context, *VerifyDomainRequest) (*VerifyDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDomain not implemented")
}
func (UnimplementedBiarbalaServiceServer) GetDomainVerificationStatus(context.Context, *GetDomainVerificationStatusRequest) (*GetDomainVerificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainVerificationStatus not implemented")
}
func (UnimplementedBiarbalaServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBiarbalaServiceServer) mustEmbedUnimplementedBiarbalaServiceServer() {}
func (UnimplementedBiarbalaServiceServer) testEmbeddedByValue()                         {}

// UnsafeBiarbalaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiarbalaServiceServer will
// result in compilation errors.
type UnsafeBiarbalaServiceServer interface {
	mustEmbedUnimplementedBiarbalaServiceServer()
}

func RegisterBiarbalaServiceServer(s grpc.ServiceRegistrar, srv BiarbalaServiceServer) {
	// If the following call pancis, it indicates UnimplementedBiarbalaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BiarbalaService_ServiceDesc, srv)
}

func _BiarbalaService_UploadProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).UploadProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_UploadProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).UploadProject(ctx, req.(*UploadProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_GetProjectMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).GetProjectMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_GetProjectMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).GetProjectMetrics(ctx, req.(*GetProjectMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_SetProjectDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProjectDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).SetProjectDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_SetProjectDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).SetProjectDomain(ctx, req.(*SetProjectDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_VerifyDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).VerifyDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_VerifyDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).VerifyDomain(ctx, req.(*VerifyDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_GetDomainVerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainVerificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).GetDomainVerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_GetDomainVerificationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).GetDomainVerificationStatus(ctx, req.(*GetDomainVerificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BiarbalaService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiarbalaServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BiarbalaService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiarbalaServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BiarbalaService_ServiceDesc is the grpc.ServiceDesc for BiarbalaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiarbalaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biarbala.v1.BiarbalaService",
	HandlerType: (*BiarbalaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadProject",
			Handler:    _BiarbalaService_UploadProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _BiarbalaService_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _BiarbalaService_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _BiarbalaService_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _BiarbalaService_ListProjects_Handler,
		},
		{
			MethodName: "GetProjectMetrics",
			Handler:    _BiarbalaService_GetProjectMetrics_Handler,
		},
		{
			MethodName: "SetProjectDomain",
			Handler:    _BiarbalaService_SetProjectDomain_Handler,
		},
		{
			MethodName: "VerifyDomain",
			Handler:    _BiarbalaService_VerifyDomain_Handler,
		},
		{
			MethodName: "GetDomainVerificationStatus",
			Handler:    _BiarbalaService_GetDomainVerificationStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _BiarbalaService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/biarbala.proto",
}

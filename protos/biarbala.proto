syntax = "proto3";

package biarbala.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/force1267/biarbala-go/protos/gen/protos";

// BiarbalaService provides the main API for the Biarbala platform
service BiarbalaService {
  // Upload a compressed file containing static website files
  rpc UploadProject(UploadProjectRequest) returns (UploadProjectResponse);

  // Get project information
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse);

  // Update project settings
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse);

  // Delete a project
  rpc DeleteProject(DeleteProjectRequest) returns (google.protobuf.Empty);

  // List user's projects
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse);

  // Get project usage metrics
  rpc GetProjectMetrics(GetProjectMetricsRequest) returns (GetProjectMetricsResponse);

  // Domain management
  rpc SetProjectDomain(SetProjectDomainRequest) returns (SetProjectDomainResponse);
  rpc VerifyDomain(VerifyDomainRequest) returns (VerifyDomainResponse);
  rpc GetDomainVerificationStatus(GetDomainVerificationStatusRequest) returns (GetDomainVerificationStatusResponse);

  // Health check endpoint
  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse);
}

// UserAdminService provides user management functionality
service UserAdminService {
  // Create a new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  
  // Get user information
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  
  // Update user information
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  
  // Delete a user
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);
  
  // List users with pagination
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
  
  // Change user password
  rpc ChangeUserPassword(ChangeUserPasswordRequest) returns (google.protobuf.Empty);
  
  // Reset user password
  rpc ResetUserPassword(ResetUserPasswordRequest) returns (ResetUserPasswordResponse);
  
  // Update user status (active, suspended, etc.)
  rpc UpdateUserStatus(UpdateUserStatusRequest) returns (google.protobuf.Empty);
  
  // Assign roles to user
  rpc AssignUserRoles(AssignUserRolesRequest) returns (google.protobuf.Empty);
  
  // Remove roles from user
  rpc RemoveUserRoles(RemoveUserRolesRequest) returns (google.protobuf.Empty);
}

// UploadProjectRequest contains the file upload data
message UploadProjectRequest {
  string project_name = 1;
  bytes file_data = 2;
  string file_format = 3; // tar, gz, zip
  string user_id = 4; // optional, for authenticated users
}

// UploadProjectResponse contains the project information after upload
message UploadProjectResponse {
  string project_id = 1;
  string access_password = 2;
  string project_url = 3;
  google.protobuf.Timestamp created_at = 4;
  ProjectStatus status = 5;
}

// GetProjectRequest contains the project identifier
message GetProjectRequest {
  string project_id = 1;
  string access_password = 2; // required for public projects
}

// GetProjectResponse contains the project information
message GetProjectResponse {
  Project project = 1;
}

// UpdateProjectRequest contains the project update data
message UpdateProjectRequest {
  string project_id = 1;
  string access_password = 2;
  string project_name = 3;
  map<string, string> settings = 4;
}

// UpdateProjectResponse contains the updated project information
message UpdateProjectResponse {
  Project project = 1;
}

// DeleteProjectRequest contains the project identifier for deletion
message DeleteProjectRequest {
  string project_id = 1;
  string access_password = 2;
}

// ListProjectsRequest contains the user identifier
message ListProjectsRequest {
  string user_id = 1;
  int32 page = 2;
  int32 page_size = 3;
}

// ListProjectsResponse contains the list of projects
message ListProjectsResponse {
  repeated Project projects = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

// GetProjectMetricsRequest contains the project identifier
message GetProjectMetricsRequest {
  string project_id = 1;
  string access_password = 2;
  google.protobuf.Timestamp start_date = 3;
  google.protobuf.Timestamp end_date = 4;
}

// GetProjectMetricsResponse contains the project metrics
message GetProjectMetricsResponse {
  ProjectMetrics metrics = 1;
}

// HealthCheckResponse contains the health status
message HealthCheckResponse {
  string status = 1;
  string version = 2;
  google.protobuf.Timestamp timestamp = 3;
}

// Project represents a deployed static website project
message Project {
  string project_id = 1;
  string project_name = 2;
  string user_id = 3;
  string project_url = 4;
  ProjectStatus status = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  int64 file_size = 8;
  string file_format = 9;
  map<string, string> settings = 10;
}

// ProjectStatus represents the current status of a project
enum ProjectStatus {
  PROJECT_STATUS_UNSPECIFIED = 0;
  PROJECT_STATUS_UPLOADING = 1;
  PROJECT_STATUS_PROCESSING = 2;
  PROJECT_STATUS_ACTIVE = 3;
  PROJECT_STATUS_ERROR = 4;
  PROJECT_STATUS_DELETED = 5;
}

// ProjectMetrics contains usage metrics for a project
message ProjectMetrics {
  string project_id = 1;
  int64 total_requests = 2;
  int64 total_bandwidth_bytes = 3;
  int64 unique_visitors = 4;
  google.protobuf.Timestamp last_accessed = 5;
  repeated DailyMetrics daily_metrics = 6;
}

// DailyMetrics contains metrics for a specific day
message DailyMetrics {
  google.protobuf.Timestamp date = 1;
  int64 requests = 2;
  int64 bandwidth_bytes = 3;
  int64 unique_visitors = 4;
}

// Domain management messages
message SetProjectDomainRequest {
  string project_id = 1;
  string access_password = 2;
  string domain = 3;
  bool is_custom_domain = 4;
}

message SetProjectDomainResponse {
  string domain = 1;
  bool requires_verification = 2;
  string verification_instructions = 3;
  string txt_record = 4;
}

message VerifyDomainRequest {
  string project_id = 1;
  string access_password = 2;
  string domain = 3;
}

message VerifyDomainResponse {
  bool verified = 1;
  string message = 2;
  google.protobuf.Timestamp verified_at = 3;
}

message GetDomainVerificationStatusRequest {
  string project_id = 1;
  string access_password = 2;
  string domain = 3;
}

message GetDomainVerificationStatusResponse {
  string domain = 1;
  bool verified = 2;
  string status = 3;
  string txt_record = 4;
  google.protobuf.Timestamp expires_at = 5;
  string verification_instructions = 6;
}

// User management messages
message User {
  string user_id = 1;
  string email = 2;
  string username = 3;
  string first_name = 4;
  string last_name = 5;
  string user_type = 6; // public, user, admin
  string status = 7; // pending, active, suspended, deleted
  bool email_verified = 8;
  string provider = 9; // keycloak, github, google, email
  string provider_id = 10;
  string avatar_url = 11;
  google.protobuf.Timestamp last_login_at = 12;
  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
  map<string, string> settings = 15;
}

message CreateUserRequest {
  string email = 1;
  string username = 2;
  string first_name = 3;
  string last_name = 4;
  string password = 5;
  string user_type = 6; // user, admin
}

message CreateUserResponse {
  User user = 1;
  string message = 2;
}

message GetUserRequest {
  string user_id = 1;
}

message GetUserResponse {
  User user = 1;
}

message UpdateUserRequest {
  string user_id = 1;
  string email = 2;
  string username = 3;
  string first_name = 4;
  string last_name = 5;
  string avatar_url = 6;
  map<string, string> settings = 7;
}

message UpdateUserResponse {
  User user = 1;
  string message = 2;
}

message DeleteUserRequest {
  string user_id = 1;
}

message ListUsersRequest {
  string user_type = 1; // optional filter
  int32 page = 2;
  int32 page_size = 3;
}

message ListUsersResponse {
  repeated User users = 1;
  int64 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message ChangeUserPasswordRequest {
  string user_id = 1;
  string current_password = 2;
  string new_password = 3;
}

message ResetUserPasswordRequest {
  string user_id = 1;
  string new_password = 2;
}

message ResetUserPasswordResponse {
  string message = 1;
}

message UpdateUserStatusRequest {
  string user_id = 1;
  string status = 2; // pending, active, suspended, deleted
}

message AssignUserRolesRequest {
  string user_id = 1;
  repeated string roles = 2;
}

message RemoveUserRolesRequest {
  string user_id = 1;
  repeated string roles = 2;
}
